.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_plot_distributions.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_distributions.py:


==================
Plot Distributions
==================

If you want a fast check of your distributions for high dimensional spaces (such
that you can only generate a surfaces for a subset of parameters), you can
simply plot all of the marginalised distributions using this method.






.. image:: /examples/images/sphx_glr_plot_distributions_001.png
    :class: sphx-glr-single-img





.. code-block:: python


    import numpy as np
    from numpy.random import random, multivariate_normal
    from chainconsumer import ChainConsumer

    np.random.seed(0)
    means, cov = np.arange(8), random(size=(8, 8))
    data = multivariate_normal(means, np.dot(cov, cov.T), size=1000000)

    params = ["$x$", "$y$", "$z$", "a", "b", "c", "d", "e"]
    c = ChainConsumer().add_chain(data, parameters=params)

    fig = c.plotter.plot_distributions(truth=means)

    fig.set_size_inches(4.5 + fig.get_size_inches())  # Resize fig for doco. You don't need this.

**Total running time of the script:** ( 0 minutes  3.153 seconds)


.. _sphx_glr_download_examples_plot_distributions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_distributions.py <plot_distributions.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_distributions.ipynb <plot_distributions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
